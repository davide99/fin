#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{pgfplots}
\usepackage{lmodern}
\usepackage[T1]{fontenc}
\usepackage{lscape}
\usepackage{listings}
\usetikzlibrary{patterns}
\usetikzlibrary{positioning,fit}
\usetikzlibrary{er}
\usepackage{pgf-umlcd}\usepackage{hyperref}
\def\UrlBreaks{\do\/\do-}
\pgfmathdeclarefunction{gauss}{2}{%
  \pgfmathparse{1/(#2*sqrt(2*pi))*exp(-((x-#1)^2)/(2*#2^2))}%
}
\setkeys{Gin}{width=\linewidth}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
\align center

\series bold
\shape smallcaps
\size largest
The Making of a
\end_layout

\begin_layout Standard
\paragraph_spacing single
\align center

\series bold
\shape smallcaps
\size largest
Music Recognition System
\end_layout

\begin_layout Standard
\paragraph_spacing single
\align center

\series bold
\shape smallcaps
\size largest
in Java
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size large
Davide Pisan√≤
\end_layout

\begin_layout Standard
\noindent
\align center
5
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset

AI
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\size large
I.I.S.
 Antonio Meucci
\end_layout

\begin_layout Standard
\align center

\size large
Casarano (LE)
\end_layout

\begin_layout Standard
\align center

\size large
Indirizzo Informatica e Telecomunicazioni
\end_layout

\begin_layout Standard
\align center

\size large
A.S.
 2017/2018
\end_layout

\begin_layout Standard
\align center
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Music and physics
\end_layout

\begin_layout Standard
A sound is a vibration that propagates through the air and can be understood
 by ears.
 MP3 players or computers use headphones or built-in speakers to produce
 vibrations and make 
\begin_inset Quotes eld
\end_inset

sounds
\begin_inset Quotes erd
\end_inset

.
 Music is just a kind of signal which can be reproduced using various sinusoidal
 waveforms and like that must be treated.
\end_layout

\begin_layout Section
Signals scrambling via sines sums
\end_layout

\begin_layout Standard
A sine wave is characterized by two parameters:
\end_layout

\begin_layout Itemize

\shape italic
Frequency
\shape default
 
\begin_inset Formula $\Longrightarrow$
\end_inset

 the number of cycles per unit of time, measured in Hertz
\end_layout

\begin_layout Itemize

\shape italic
Amplitude
\shape default
 
\begin_inset Formula $\Longrightarrow$
\end_inset

 the height of the cycle
\end_layout

\begin_layout Standard
A generic sine wave is described by the function:
\begin_inset Formula 
\[
y(t)=A\,sin(2\pi ft+\varphi)
\]

\end_inset

where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $A$
\end_inset

 is the amplitude
\end_layout

\begin_layout Itemize
\begin_inset Formula $f$
\end_inset

 is the frequency
\end_layout

\begin_layout Itemize
\begin_inset Formula $t$
\end_inset

 is the time
\end_layout

\begin_layout Itemize
\begin_inset Formula $\varphi$
\end_inset

 is the phase
\end_layout

\begin_layout Standard
In the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:20Hz-sine-wave"

\end_inset

 the sine wave is described by the function:
\begin_inset Formula 
\[
y(t)=1\,sin(2\pi20+0)=sin(40\pi)
\]

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:.1,
\end_layout

\begin_layout Plain Layout

		samples=100,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .1,
\end_layout

\begin_layout Plain Layout

		ymin =  -2, ymax = 2,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		xtick={0,0.02,0.04,0.06,0.08,0.1}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(2*pi*20*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			fill=black!70,
\end_layout

\begin_layout Plain Layout

			pattern=north east lines,
\end_layout

\begin_layout Plain Layout

			line width=0pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(2*pi*20*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:20Hz-sine-wave"

\end_inset

a 20Hz sine wave
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
But, in the real world, almost any signal is a weighted sum of sines.
 For example, take three different sine waves, as follows:
\end_layout

\begin_layout Itemize
Frequency 10Hz and amplitude 1 
\begin_inset Formula $\Longrightarrow$
\end_inset

 
\begin_inset Formula $a(t)=sin(20\pi t)$
\end_inset


\end_layout

\begin_layout Itemize
Frequency 30Hz and amplitude 2 
\begin_inset Formula $\Longrightarrow$
\end_inset

 
\begin_inset Formula $b(t)=2sin(60\pi t)$
\end_inset


\end_layout

\begin_layout Itemize
Frequency 60Hz and amplitude 3 
\begin_inset Formula $\Longrightarrow$
\end_inset

 
\begin_inset Formula $c(t)=3sin(120\pi t)$
\end_inset


\end_layout

\begin_layout Standard
These three functions can be plotted separately as shown in the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Three-different-sine"

\end_inset

, or they can be summed up in just a single function to represent a more
 realistic sound (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sum-of-the"

\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:.1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .1,
\end_layout

\begin_layout Plain Layout

		ymin =  -4, ymax = 4,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		xtick={0,0.02,0.04,0.06,0.08,0.1}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*20*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			2*sin(deg(pi*60*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=green,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			3*sin(deg(pi*120*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Three-different-sine"

\end_inset

Three different sine waves
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:.1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .1,
\end_layout

\begin_layout Plain Layout

		ymin =  -6, ymax = 6,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		xtick={0,0.02,0.04,0.06,0.08,0.1}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*20*x)) + 2*sin(deg(pi*60*x)) + 3*sin(deg(pi*120*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sum-of-the"

\end_inset

Sum of the three sine waves
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Spectrogram
\end_layout

\begin_layout Standard
A 
\series bold
spectrogram
\series default
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Spectrogram-of-a"

\end_inset

) is a visual representation of how the frequencies of a signal vary with
 time.
 Usually, a spectrogram is made up of three axis (making a 3D graph):
\end_layout

\begin_layout Itemize
Time on the horizontal axis (x)
\end_layout

\begin_layout Itemize
Frequencies on the vertical axis (y)
\end_layout

\begin_layout Itemize
Amplitude of a given frequency at a given time (described by a color)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/spec.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Spectrogram-of-a"

\end_inset

Spectrogram of a real song
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Digitalization
\end_layout

\begin_layout Standard
Nowadays the most common way to listen to music is using a digital file
 (such as an MP3 file or a FLAC file and so on).
 However, a sound is an analog phenomenon that needs to be converted into
 a 
\series bold
digital
\series default
 representation, in order to be easily recorded and stored.
\end_layout

\begin_layout Subsection
Sampling
\end_layout

\begin_layout Standard
Analog signals are continuous signals, which means that given two boundaries
 in the signals there is always a point among them.
 But in the digital world is not so affordable to store an infinite amount
 of data, so the analog signal needs to be reduced in a 
\series bold
discrete-time signal
\series default
.
 This process is called 
\series bold
sampling
\series default
.
 It is quite simple: an instantaneous value of the continuous signal is
 taken every 
\series bold
T
\series default
 seconds.
 T is called 
\series bold
sampling period
\series default
 and it should be short enough so that the digital song sounds like the
 analog one.
 The 
\series bold
sampling rate 
\series default
or 
\series bold
sampling frequency 
\series default
f
\begin_inset script subscript

\begin_layout Plain Layout
s
\end_layout

\end_inset

 is the number of samples obtained in one second, given by the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{s}=\frac{1}{T}
\]

\end_inset


\end_layout

\begin_layout Standard
The standard sampling rate for digital music is usually 44100 Hz.
 The reason behind that number lies in the Nyquist-Shannon theorem which
 can be expressed as:
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Nyquist"

\end_inset

Suppose the highest frequency component for a given analog signal is 
\begin_inset Formula $f_{max}$
\end_inset

, the sampling rate must be at least
\shape italic
 
\begin_inset Formula $2f_{max}$
\end_inset

.
\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
There is enough theory involved in the theorem, but it states that given
 an analog signal, it needs at least 2 points per cycle to be correctly
 identified.
 So, since the human ears can listen to singnals whose frequency is between
 20 Hz and 20 kHz, taking the highest boundary and multiply it by 2, it
 will give 40 kHz, which is close enough to the standardized 44.1 kHz (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sampling-example-of"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:.1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .1,
\end_layout

\begin_layout Plain Layout

		ymin =  -2, ymax = 2,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		xtick={0,0.02,0.04,0.06,0.08,0.1}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			cos(deg(pi*60*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			red,
\end_layout

\begin_layout Plain Layout

			mark=+,
\end_layout

\begin_layout Plain Layout

			line width=1pt,
\end_layout

\begin_layout Plain Layout

			samples=7.5
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			cos(deg(pi*60*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sampling-example-of"

\end_inset

Sampling example of a 30 Hz signal
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Quantization
\end_layout

\begin_layout Standard
With the sampling process, the signal is not fully digital: the time resolution
 became discrete but what about signal amplitude? The amplitude of a signal
 represents its loudness, and in an analog world it is continuous, so there
 must be a way to make it discrete.
 This process is called 
\series bold
quantization
\series default
.
 The quantization resolution is measured in bits, also known as 
\series bold
bit depth
\series default
 of a song.
\end_layout

\begin_layout Standard
Taking a depth of 3 bits means that the loudness of the song can vary between
 0 and 
\begin_inset Formula $2^{3}-1$
\end_inset

 , so there are just 8 quantization levels to represent the loudness of
 the whole song (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:3-bit-quantization-example"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:360,
\end_layout

\begin_layout Plain Layout

		hide y axis,
\end_layout

\begin_layout Plain Layout

		axis x line*=middle,
\end_layout

\begin_layout Plain Layout

		xtick=
\backslash
empty,
\end_layout

\begin_layout Plain Layout

		samples=26
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [const plot mark mid, very thick, red] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [ycomb, mark=*, thick, mark size=1] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [densely dotted, samples=51] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:3-bit-quantization-example"

\end_inset

3-bit quantization example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The higher the bit depth, the better the amplitude is approximated.
 The standard quantization is coded on 
\series bold
16 bits
\series default
.
 For instance, in the same previous analog signal with a 16-bit quantization
 the amplitude can assume 
\begin_inset Formula $2^{16}$
\end_inset

 values, which will give a much more precise accuracy (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:16-bit-quantization-example-1"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:360,
\end_layout

\begin_layout Plain Layout

		hide y axis,
\end_layout

\begin_layout Plain Layout

		axis x line*=middle,
\end_layout

\begin_layout Plain Layout

		xtick=
\backslash
empty,
\end_layout

\begin_layout Plain Layout

		samples=100
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [const plot mark mid, very thick, red] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [ycomb, mark=*, thick, mark size=1] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [densely dotted, samples=51] {sin(2*x)};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:16-bit-quantization-example-1"

\end_inset

16-bit quantization example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Divide and conquer: the math way
\end_layout

\begin_layout Standard
The previous sections should have given enough information to proceed to
 the real problem: how to break down a complex audio signal into pure sine
 waves with their own parameters.
\end_layout

\begin_layout Subsection
The Taylor series
\end_layout

\begin_layout Standard
A 
\series bold
Taylor series
\series default
 is a series expansion of a function about a point.
 The Taylor series of a 
\shape italic
real function
\shape default
 
\begin_inset Formula $f(x)$
\end_inset

 about a point 
\begin_inset Formula $a$
\end_inset

 is given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x)=\stackrel[n=0]{\infty}{\sum}\frac{f^{(n)}(a)}{n!}(x-a)^{n}
\]

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Formula $a=0$
\end_inset

 then the expansion is known as a 
\series bold
Maclaurin series
\series default
, given by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x)=\stackrel[n=0]{\infty}{\sum}\frac{f^{(n)}(0)}{n!}x{}^{n}
\]

\end_inset


\end_layout

\begin_layout Standard
If the upper limit of the summation is not an 
\begin_inset Formula $\infty$
\end_inset

 but a generic 
\begin_inset Formula $N$
\end_inset

 then a Taylor polynomial is being calculated.
\end_layout

\begin_layout Standard
The Taylor's theorem states that any function can be expressed as a Taylor
 series as long as the function can be derived 
\begin_inset Formula $N$
\end_inset

 times in a 
\series bold
neighborhood
\series default
 of 
\begin_inset Formula $a$
\end_inset

.
 But this is not always possible for a normal audio signal, for instance,
 seeing the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Audio-signal-example"

\end_inset

, the function represented is neither analytic nor continuous, so it cannot
 be approximated by a Taylor polynomial.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		samples=200,
\end_layout

\begin_layout Plain Layout

		domain=0:10,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 10,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]
\end_layout

\begin_layout Plain Layout

		{(0.3*gauss(0,0.2) + 0.5*rand) * sin(deg(x)) * 2};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Audio-signal-example"

\end_inset

Audio signal example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Fourier series
\end_layout

\begin_layout Standard
Joseph Fourier, a French mathematician, discovered a way to approximate
 a discontinuous function using a so-called 
\series bold
trigonometric polynomial 
\series default
or a 
\series bold
trigonometric series
\series default
.
\end_layout

\begin_layout Subsubsection
Trigonometric polynomials
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\shape italic
Def.
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Trigonometric polynomial
\end_layout

\begin_layout Plain Layout
A trigonometric polynomial of order 
\begin_inset Formula $n$
\end_inset

 is a function like:
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $P_{n}(x)=\frac{a_{0}}{2}+\stackrel[k=1]{n}{\sum}(a_{k}\cos kx+b_{k}\sin kx)$
\end_inset

, with 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset


\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The real constant 
\begin_inset Formula $a_{k}$
\end_inset

 and 
\begin_inset Formula $b_{k}$
\end_inset

 are independent from 
\begin_inset Formula $x$
\end_inset

 and they are called 
\series bold
polynomial coefficients
\series default
.
\end_layout

\begin_layout Standard
The term 
\begin_inset Formula $a_{k}\cos kx+b_{k}\sin kx$
\end_inset

 is a sinusoidal function whose period is 
\begin_inset Formula $T_{k}=\frac{2\pi}{k}$
\end_inset

.
\end_layout

\begin_layout Standard
So a trigonometric polynomial is a linear combination of sinusoidal functions,
 whose common period is 
\begin_inset Formula $T=2\pi$
\end_inset

, multiple of all the main periods.
 It is a periodic function, but not necessarily sinusoidal.
\end_layout

\begin_layout Subsubsection
Trigonometric series
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\shape italic
Def.
\end_layout

\begin_layout Standard
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Trigonometric series
\end_layout

\begin_layout Plain Layout
A trigonometric series is a series of functions like:
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Formula $\frac{a_{0}}{2}+\stackrel[k=1]{+\infty}{\sum}(a_{k}\cos kx+b_{k}\sin kx)$
\end_inset

, with 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset Formula $a_{0}$
\end_inset

, 
\begin_inset Formula $a_{k}$
\end_inset

 and 
\begin_inset Formula $b_{k}$
\end_inset

 are the 
\series bold
coefficients 
\series default
of the series.
\end_layout

\begin_layout Subsubsection
Fourier coefficients
\end_layout

\begin_layout Standard
Take a generic periodic function 
\begin_inset Formula $f(x)$
\end_inset

 with 
\begin_inset Formula $T=2\pi$
\end_inset

, integrable in 
\begin_inset Formula $\left[-\pi,\pi\right]$
\end_inset

.
 Then surely 
\begin_inset Formula $f(x)\cos nx$
\end_inset

 and 
\begin_inset Formula $f(x)\sin nx$
\end_inset

 with 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

 will be integrable in 
\begin_inset Formula $\left[-\pi,\pi\right]$
\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\noindent

\shape italic
Def.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Fourier coefficients of
\series default
 
\begin_inset Formula $f(x)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
a_{0}=\sideset{\frac{1}{\pi}}{_{-\pi}^{\pi}}\int f(x)\,dx
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
a_{n}=\sideset{\frac{1}{\pi}}{_{-\pi}^{\pi}}\int f(x)\cos nx\,dx
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
b_{n}=\sideset{\frac{1}{\pi}}{_{-\pi}^{\pi}}\int f(x)\sin nx\,dx
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
with 
\begin_inset Formula $n\in\mathbb{N^{\star}}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fourier series
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent

\shape italic
Def.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\series bold
Fourier series
\end_layout

\begin_layout Plain Layout
Given a function 
\begin_inset Formula $f(x)$
\end_inset

 with 
\begin_inset Formula $T=2\pi$
\end_inset

 and integrable in 
\begin_inset Formula $\left[-\pi,\pi\right]$
\end_inset

, the following trigonometric series is called 
\series bold
Fourier series
\series default
:
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\frac{a_{0}}{2}+\stackrel[n=1]{+\infty}{\sum}(a_{n}\cos nx+b_{n}\sin nx)
\]

\end_inset


\end_layout

\begin_layout Plain Layout
whose coefficients are the Fourier coefficients.
\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
If the function 
\begin_inset Formula $f(x)$
\end_inset

 to be expanded is even or odd the Fourier series can be simplified as follows:
\end_layout

\begin_layout Itemize
\begin_inset Formula $f(x)$
\end_inset

 is even, Fourier series is a cosines series
\begin_inset Foot
status open

\begin_layout Plain Layout
The product of two even functions is an even function; the product of two
 odd functions is an even function.
\end_layout

\begin_layout Plain Layout

\series bold
Integration by parts
\series default
 is often used to solve those integrals.
\end_layout

\end_inset


\begin_inset Formula 
\[
\frac{a_{0}}{2}+\stackrel[n=1]{+\infty}{\sum}a_{n}\cos nx
\]

\end_inset

where:
\begin_inset Formula 
\[
a_{0}=\sideset{\frac{1}{\pi}}{_{-\pi}^{\pi}}\int f(x)\,dx=\sideset{\frac{2}{\pi}}{_{0}^{\pi}}\int f(x)\,dx
\]

\end_inset


\begin_inset Formula 
\[
a_{n}=\sideset{\frac{1}{\pi}}{_{-\pi}^{\pi}}\int f(x)\cos nx\,dx=\sideset{\frac{2}{\pi}}{_{0}^{\pi}}\int f(x)\cos nx\,dx
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f(x)$
\end_inset

 is odd, Fourier series is a sines series
\begin_inset Formula 
\[
\stackrel[n=1]{+\infty}{\sum}b_{n}\sin nx
\]

\end_inset

where:
\begin_inset Formula 
\[
b_{n}=\sideset{\frac{2}{\pi}}{_{0}^{\pi}}\int f(x)\sin nx\,dx
\]

\end_inset


\end_layout

\begin_layout Section
Discrete Fourier Transform
\end_layout

\begin_layout Standard
The 
\series bold
DFT
\series default
 (Discrete Fourier Transform) applies to discrete signals and gives a discrete
 spectrum.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
X(n)=\stackrel[t=0]{N-1}{\sum}x(t)e^{-\frac{i2\pi tn}{N}}
\]

\end_inset


\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Itemize

\series bold
\begin_inset Formula $N$
\end_inset


\series default
 is the size of the 
\series bold
window
\series default
: the number of samples that composed the signal
\end_layout

\begin_layout Itemize
\begin_inset Formula $X(n)$
\end_inset

 is the 
\series bold
n
\begin_inset script superscript

\begin_layout Plain Layout

\series bold
th
\end_layout

\end_inset

 bin of frequencies
\end_layout

\begin_layout Itemize
\begin_inset Formula $x(t)$
\end_inset

 is the 
\series bold
t
\begin_inset script superscript

\begin_layout Plain Layout

\series bold
th
\end_layout

\end_inset

 sample of the audio signal
\end_layout

\begin_layout Standard
The interpretation is that the vector 
\begin_inset Formula $x$
\end_inset

 represents the signal level at various points in time, the vector 
\begin_inset Formula $X$
\end_inset

 represents the signal level at various frequencies.
 What the formula states is that the signal level at frequency 
\begin_inset Formula $n$
\end_inset

 is equal to the sum of the signal level at each time 
\begin_inset Formula $t$
\end_inset

 multiplied by a complex exponential (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-representation-of"

\end_inset

).
\end_layout

\begin_layout Standard
For example, take an audio signal with 512-sample window, this formula must
 be applied 512 times:
\end_layout

\begin_layout Itemize
Once for 
\begin_inset Formula $n=0$
\end_inset

 to compute the 
\begin_inset Formula $0^{th}$
\end_inset

 bin of frequencies
\end_layout

\begin_layout Itemize
Once for 
\begin_inset Formula $n=1$
\end_inset

 to compute the 
\begin_inset Formula $1^{st}$
\end_inset

 bin of frequencies
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Itemize
Once for 
\begin_inset Formula $n=511$
\end_inset

 to compute the 
\begin_inset Formula $511^{th}$
\end_inset

 bin of frequencies
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[x={(1cm,0.5cm)},z={(0cm,0.5cm)},y={(1cm,-0.2cm)}]
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->,thick,black!70] (0,6.5,0) -- (6.2,6.5,0) node[right] {Frequency};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->,thick,black!70] (0,0,0) -- (0,6.5,0) node[below right] {Time};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->,thick] (0,0,0) -- (0,0,2) node[above] {Magnitude};
\end_layout

\begin_layout Plain Layout

	
\backslash
foreach 
\backslash
y in {0.5,1.5,...,5.5}{
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [cyan!50, domain=0:2*pi,samples=200,smooth]
\end_layout

\begin_layout Plain Layout

			plot (
\backslash
y,
\backslash
x, {sin(4*
\backslash
y*
\backslash
x r)/
\backslash
y });
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, ultra thick] (
\backslash
y,6.5,0) -- (
\backslash
y,6.5,1/
\backslash
y);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
draw [red, thick, domain=0:2*pi,samples=200,smooth]
\end_layout

\begin_layout Plain Layout

	plot (0,
\backslash
x, {sin(4*0.5*
\backslash
x r)/0.5 + sin(4*1.5*
\backslash
x r)/1.5 + sin(4*2.5*
\backslash
x r)/2.5 + sin(4*3.5*
\backslash
x r)/3.5 + sin(4*4.5*
\backslash
x r)/4.5 + sin(4*5.5*
\backslash
x r)/5.5} );
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Visual-representation-of"

\end_inset

Visual representation of FT
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
A bin of frequencies is a group of frequencies among two boundaries.
 The reason why the DFT can compute bins of frequencies and not exact frequencie
s is quite simple: the DFT gives a 
\series bold
discrete spectrum
\series default
.
 A bin of frequencies is the smallest unit of frequencies the DFT can compute
 and the size of the bin is called 
\series bold
spectral resolution 
\series default
or 
\series bold
frequency resolution
\series default
 which is given by the formula:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
B_{S}=\frac{F_{S}}{N}
\]

\end_inset


\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $B_{S}$
\end_inset

 is the 
\series bold
bin size
\end_layout

\begin_layout Itemize
\begin_inset Formula $F_{S}$
\end_inset

 is the 
\series bold
sampling rate
\end_layout

\begin_layout Itemize
\begin_inset Formula $N$
\end_inset

 is the 
\series bold
size of the window
\end_layout

\begin_layout Standard
For instance, taking a sampling rate of 8000 Hz and a window size of 512,
 the bin size will be of 
\series bold
15.6 Hz
\series default
, so:
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $0^{th}$
\end_inset

 bin contains the frequencies between 0 Hz and 15.6 Hz
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $1^{st}$
\end_inset

 bin contains the frequencies between 15.6 Hz and 31.2 Hz
\end_layout

\begin_layout Itemize
And so on
\end_layout

\begin_layout Standard
A particularity for an audio signal is that 
\series bold
only the half of the bins computed by the DFT are needed
\series default
.
 An audio signal is a real input, and when the FT is applied to a real signal
 the output of the FT is symmetric.
\end_layout

\begin_layout Standard
One of the fastest implementation of the DFT is the 
\series bold
FFT
\series default
 (Fast Fourier Transform) algorithm, which will be used later.
\end_layout

\begin_layout Section
Window function
\end_layout

\begin_layout Standard
Now the problem is partially solved: the DFT can be used to obtain the frequenci
es amplitude for (just saying) the first 
\begin_inset Formula $\frac{1}{10}$
\end_inset

 second part of the song, for the second, the third and so on.
\end_layout

\begin_layout Standard
The problem is that in this way a rectangular function is implicitly applied:
 a function that equals 1 for the song portion under analysis and 0 elsewhere
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rectangular-window-function"

\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		domain=0:.1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = .1,
\end_layout

\begin_layout Plain Layout

		ymin =  -2, ymax = 2,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude,
\end_layout

\begin_layout Plain Layout

		axis x line=bottom,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		xtick={0,0.02,0.04,0.06,0.08,0.1}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[color=red,mark=x] coordinates { (0,1) (0.02,1) };
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[color=red,mark=x] coordinates { (0.02,0) (0.1,0) };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=green,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*120*x))/2 - sin(deg(pi*60*x))/3 - sin(deg(pi*20*x))/6
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rectangular-window-function"

\end_inset

Rectangular window function example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
By windowing the audio signal, the audio signal is multiplied by a window
 function which depends on the piece of the audio signal under analysis.
 The usage of a window function produces 
\series bold
spectral leakage
\series default
.
 Spectral leakage is the appearance of new frequencies that doesn't exist
 inside the audio signal.
 The power of the real frequencies is leaked to others frequencies.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Spectral leakage can't be avoided but it can be controlled and reduced by
 choosing the right window function: there are many different window function
 besides the rectangular one.
 Just to name a few: triangular, Blackman, Hamming, Hann and many others.
\end_layout

\begin_layout Standard
When analyzing unknown very noisy data best choice is the Hann window function,
 defined by the following formula:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
w(n)=\frac{1}{2}\left(1-\cos\left(\frac{2\pi n}{N-1}\right)\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $N$
\end_inset

 is the size of the window
\end_layout

\begin_layout Itemize
\begin_inset Formula $w(n)$
\end_inset

 is the value of the window function at 
\begin_inset Formula $n$
\end_inset


\end_layout

\begin_layout Standard
The aim of this window function is to decrease the amplitude of the discontinuit
ies at the boundaries of a given piece of an audio signal (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Shape-the-signal"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight/2,
\end_layout

\begin_layout Plain Layout

		domain=0:1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 1,
\end_layout

\begin_layout Plain Layout

		ymin = -1.5, ymax = 1.5,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = Time,
\end_layout

\begin_layout Plain Layout

		ylabel=Audio signal,
\end_layout

\begin_layout Plain Layout

		axis x line=center,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		ytick=
\backslash
empty,
\end_layout

\begin_layout Plain Layout

		xtick=
\backslash
empty
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*20*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight/2,
\end_layout

\begin_layout Plain Layout

		domain=0:1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 1,
\end_layout

\begin_layout Plain Layout

		ymin =  -1.5, ymax = 1.5,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = Time,
\end_layout

\begin_layout Plain Layout

		ylabel = Window function,
\end_layout

\begin_layout Plain Layout

		axis x line=center,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		ytick=
\backslash
empty,
\end_layout

\begin_layout Plain Layout

		xtick=
\backslash
empty
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight/2,
\end_layout

\begin_layout Plain Layout

		domain=0:1,
\end_layout

\begin_layout Plain Layout

		samples=500,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 1,
\end_layout

\begin_layout Plain Layout

		ymin =  -1.5, ymax = 1.5,
\end_layout

\begin_layout Plain Layout

		grid = major,
\end_layout

\begin_layout Plain Layout

		xlabel = Time,
\end_layout

\begin_layout Plain Layout

		ylabel = Window function,
\end_layout

\begin_layout Plain Layout

		axis x line=center,
\end_layout

\begin_layout Plain Layout

		axis y line=left,
\end_layout

\begin_layout Plain Layout

		ytick=
\backslash
empty,
\end_layout

\begin_layout Plain Layout

		xtick=
\backslash
empty
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=red,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			-sin(deg(pi*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			color=blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]{
\end_layout

\begin_layout Plain Layout

			sin(deg(pi*20*x)) * sin(deg(pi*x))
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Shape-the-signal"

\end_inset

Shape the signal with a window function
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Downsampling and window size
\end_layout

\begin_layout Standard

\series bold
Downsampling 
\series default
is the process of reducing the sampling rate of a signal.
 Also, the window size can be reduced accordingly, taking the highest possible
 acceptable value (the value which gives an acceptable frequency resolution).
 For instance, resample a song from 44.1 kHz to 8 kHz and use a window size
 of just 512: in this way, there are fewer samples to analyze and the FFT
 is applied less frequently.
\end_layout

\begin_layout Standard
The only difference is that the resampled song will only have frequencies
 from 0 to 4 kHz (Nyquist-Shannon theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "Nyquist"

\end_inset

), but the most important part of the song is still present in this range
 of frequencies.
\end_layout

\begin_layout Chapter
The actual algorithm
\end_layout

\begin_layout Standard
Now it is the time to put everything together and start coding the algorithm.
 The aim of the software is to record a small portion of a song and find
 its title.
\end_layout

\begin_layout Standard
The following sections will cover a global overview of the algorithm, then
 the actual process involved in the song scoring.
\end_layout

\begin_layout Standard
Take into account that, at this abstraction level, some obvious parts (such
 as the usage of the microphone interface or the track file reading routines)
 will not be described, since they are standard pieces of code.
\end_layout

\begin_layout Section
Global overview
\end_layout

\begin_layout Standard
An 
\series bold
audio fingerprint 
\series default
is a digital summary that can be used to identify an audio sample.
 In the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:General-overview-scheme"

\end_inset

 a simplified architecture of the scoring algorithm is represented.
\begin_inset VSpace defskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[box/.style={draw,rounded corners,text width=2.5cm,node
 distance=1cm and 3 cm,align=center}]
\end_layout

\begin_layout Plain Layout

	
\backslash
node[box] (a) {
\backslash
textbf{Song files}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[box,right=of a] (b) {
\backslash
textbf{Fingerprint database}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[box,below=of b] (c) {
\backslash
textbf{Server}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[box,below=of c] (d) {
\backslash
textbf{Recording fingerprint}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[box,left=of d] (e) {
\backslash
textbf{Recording}};
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->] (a) to node [above] {
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{tabular}{cc}
\end_layout

\begin_layout Plain Layout

			Fingerprinting
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

			Algorithm
\end_layout

\begin_layout Plain Layout

		
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

	} (b);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[<-] (b) to node [right] {Search} (c);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->] (e) to node [above] {
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{tabular}{cc}
\end_layout

\begin_layout Plain Layout

			Fingerprinting
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

			Algorithm
\end_layout

\begin_layout Plain Layout

		
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

	} (d);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[->] (d) to node [right] {Sent to} (c);
\end_layout

\begin_layout Plain Layout

	
\backslash
node[draw,dotted,fit=(a)(b)(c),label=left:
\backslash
rotatebox{90}{Server-side}] {};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[draw,dotted,fit=(d)(e),label=left:
\backslash
rotatebox{90}{Client-side}] {};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:General-overview-scheme"

\end_inset

General overview scheme
\end_layout

\end_inset


\end_layout

\end_inset

On the 
\series bold
server side
\series default
:
\end_layout

\begin_layout Itemize
The algorithm computes the fingerprints of the input tracks
\end_layout

\begin_layout Itemize
Store the fingerprints in the database
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

On the 
\series bold
client side
\series default
:
\end_layout

\begin_layout Itemize
Record the current playing music for a couple of seconds
\end_layout

\begin_layout Itemize
Compute the fingerprints of the recording
\end_layout

\begin_layout Itemize
Send them to the server
\end_layout

\begin_layout Itemize
Output the server response
\end_layout

\begin_layout Standard
When the server receives the recording fingerprints sent by the client it
 checks if they are in the database and sends a response to the client.
\end_layout

\begin_layout Standard
In the following sections the algorithm is being described.
\end_layout

\begin_layout Section
Spectrogram creation
\end_layout

\begin_layout Standard
The first step to analyze the audio is to create the spectrogram.
 The process is described in the following lines:
\end_layout

\begin_layout Itemize
A 512-sized Hann window function is computed
\end_layout

\begin_layout Itemize
The audio signal is divided in 512-sized windows with a 50% overlap (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Audio-windowing-with-overlap"

\end_inset

)
\end_layout

\begin_layout Itemize
Each audio window is multiplied by the Hann precomputed window
\end_layout

\begin_layout Itemize
The DFT is computed for each audio window and added into a list which represents
 the spectrogram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		samples=200,
\end_layout

\begin_layout Plain Layout

		domain=0:10,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 10,
\end_layout

\begin_layout Plain Layout

		ymin = -1, ymax = 1,
\end_layout

\begin_layout Plain Layout

		xlabel = time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = amplitude
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (0,0) rectangle (10,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (10,0) rectangle (20,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (20,0) rectangle (30,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (30,0) rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (40,0) rectangle (50,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (50,0) rectangle (60,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (60,0) rectangle (70,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (70,0) rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (80,0) rectangle (90,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [red, very thick] (90,0) rectangle (100,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (5,0) rectangle (15,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (15,0) rectangle (25,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (25,0) rectangle (35,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (35,0) rectangle (45,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (45,0) rectangle (55,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (55,0) rectangle (65,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (65,0) rectangle (75,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (75,0) rectangle (85,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw [green, fill=green, fill opacity=0.2] (85,0) rectangle (95,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[
\end_layout

\begin_layout Plain Layout

			blue,
\end_layout

\begin_layout Plain Layout

			line width=1pt
\end_layout

\begin_layout Plain Layout

		]
\end_layout

\begin_layout Plain Layout

		{(0.3*gauss(0,0.2) + 0.5*rand) * sin(deg(x)) * 2};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Audio-windowing-with-overlap"

\end_inset

Audio windowing with overlap
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Peaks finder and fingerprinting
\end_layout

\begin_layout Standard
The spectrogram is then processed in order to obtain its most significant
 information.
 It is divided into a sort of a grid where each cell of the grid has the
 following size:
\end_layout

\begin_layout Itemize
Width equals to 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Itemize
Height equals to a range of frequencies (called 
\series bold
band
\series default
)
\end_layout

\begin_layout Standard
Take the simplified figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Spectrum-division"

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Each color is a band
\end_layout

\end_inset

 where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $C=4$
\end_inset


\end_layout

\begin_layout Itemize
The band size is always 100 Hz
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequency $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=blue, line width=1pt] (0,0)
 rectangle (40,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=blue, line width=1pt] (40,0)
 rectangle (80,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=blue, line width=1pt] (80,0)
 rectangle (120,100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=green, line width=1pt] (0,100)
 rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=green, line width=1pt] (40,100)
 rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=green, line width=1pt] (80,100)
 rectangle (120,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=red, line width=1pt] (0,200)
 rectangle (40,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=red, line width=1pt] (40,200)
 rectangle (80,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=red, line width=1pt] (80,200)
 rectangle (120,300);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=orange, line width=1pt] (0,300)
 rectangle (40,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north west lines, pattern color=orange, line width=1pt] (40,300)
 rectangle (80,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[pattern=north east lines, pattern color=orange, line width=1pt] (80,300)
 rectangle (120,400);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[decoration={brace,mirror,raise=15pt},decorate]   (0,0) -- node[below=16pt]
 {
\backslash
textbf{C}} (3.2,0);
\end_layout

\begin_layout Plain Layout

	
\backslash
draw[decoration={brace,mirror},decorate]   (10.8,0) -- node[xshift=10pt]
 {
\backslash
rotatebox{-90}{
\backslash
textbf{band}}} (10.8,1.4);
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Spectrum-division"

\end_inset

Spectrogram division
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
In the actual algorithm 
\begin_inset Formula $C=32$
\end_inset

 and the bands lengths follow a logarithmic scale.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
For each cell the algorithm finds and stores the 3 most powerful frequencies
 in a list (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Three-points-per"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequency $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (0,0) rectangle (40,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (40,0) rectangle (80,100);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[blue, line width=1pt] (80,0) rectangle (120,100);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (0,100) rectangle (40,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (40,100) rectangle (80,200);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[green, line width=1pt] (80,100) rectangle (120,200);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (0,200) rectangle (40,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (40,200) rectangle (80,300);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[red, line width=1pt] (80,200) rectangle (120,300);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (0,300) rectangle (40,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (40,300) rectangle (80,400);
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[orange, line width=1pt] (80,300) rectangle (120,400);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.745560224337 , 378.5992651
97 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 3.35149848633 , 885.69642912
8 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.36552968092 , 687.79506248
 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.73052621593 , 1521.618562
76 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.24021149438 , 1286.762539
77 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.31025446998 , 1759.585072
66 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.367038182557 , 2640.0077863
8 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.60223704132 , 2543.51959691
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 3.29030455474 , 2857.42356211
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 3.06012887649 , 3859.57073
579 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.04281482521 , 3310.98256
132 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 0.342092598793 ,
 3187.00295803 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 6.13965840628 , 346.37314184
4 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 6.18220033666 , 151.14467838
3 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.10152863505 , 640.55570001
8 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.25598325224 , 1797.769092
61 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 7.08091233708 , 1668.626795
36 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.30064456137 , 1131.850638
39 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.2544573697 , 2751.61392809
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.8872104256 , 2267.19959314
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.45001350539 , 2289.19953153
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.64148867695 , 3139.99246
694 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.80868333293 , 3160.84633
384 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 4.68927142292 , 3263.16366
007 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.50986878705 , 653.82012721
1 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.94884609281 , 539.46336189
3 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.44637953657 , 707.94351178
6 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.49315824083 , 1563.597638
99 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.74759745215 , 1888.112335
31 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 10.7844077137 , 1477.871231
18 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.899479235 , 2856.56308609
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 9.50730112412 , 2796.10602412
 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 11.6806723738 , 2173.69277417
 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.28333255686 , 3800.01058
487 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.87529616782 , 3162.85741
608 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.5805497799 , 3704.10829
642 ) }; 
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Three-points-per"

\end_inset

Three points per cell spectrogram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Links-structure"

\end_inset

Links structure
\end_layout

\begin_layout Standard
Now, having a way to compute a frequency summary of an audio signal, the
 recognition process should be straight enough: each point of the recording
 should be compared with the points of the full song.
 Though it works well, this simple approach requires a lot of computation
 time.
\end_layout

\begin_layout Standard
Instead of comparing each point one by one, the idea is to look for multiple
 points at the same time.
 This group of points is called 
\series bold
links
\series default
, and it represents a relationship between a point and some others.
 In order to be sure that both the recording and the full song will generate
 the same links, a rule must be defined: spectrogram points must be sorted
 in ascending order according to the window they belong to.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Links generation"

\end_inset

So, given a point 
\begin_inset Formula $\alpha$
\end_inset

 (called 
\series bold
address
\series default
) and an initially empty set of points A, the algorithm will put in A all
 the other points whose window difference compared to the point 
\begin_inset Formula $\alpha$
\end_inset

 is between 1 and 3 and are in the same band as 
\begin_inset Formula $\alpha$
\end_inset

.
 In symbols:
\begin_inset Formula 
\[
\beta\in A\Leftrightarrow(1\leq\beta.window-\alpha.window<3)\wedge(\beta.band=\alpha.band)
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
For each point belonging to A a 
\series bold
link 
\series default
is computed and added to a list (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Links-creation"

\end_inset

).
 The link structure is the following (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Link-structure"

\end_inset

):
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $link.hash=SHA1((\beta.window-\alpha.window)+(\beta.frequency-\alpha.frequency)+\alpha.frequency)$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $link.window=\alpha.window$
\end_inset


\end_layout

\begin_layout Standard
The produced links are quite reproducible, even in the presence of noise
 and codec compression.
 Another advantage is that in this way all the times are relative.
\end_layout

\begin_layout Standard
On the server side each link is stored in a database along with the song
 information.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequency $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout


\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 2.07246366282 , 746.01432767
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.93264031653 , 179.29405770
1 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.354616533601 , 356.0396263
84 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.15960458468 , 1381.492156
86 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.72309319377 , 1629.633417
81 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.71583919728 , 1427.860317
78 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.9205238997 , 2753.72729596
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.546995939476 , 2353.2251799
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.18253338838 , 2840.39369243
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.68377804401 , 3526.04444
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.87609035949 , 3486.34030
544 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.28755568283 , 3631.17508
084 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.37811652146 , 453.91934777
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.60340316546 , 848.06920104
4 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.66076427426 , 767.50608134
2 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [no marks] coordinates { ( 5.44439247352 , 1886.11714475 ) ( 2.72309319377
 , 1629.63341781 ) }; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.44439247352 , 1886.117144
75 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.35650455297 , 1300.195594
62 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.48669208201 , 1553.705384
67 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.52845468778 , 2714.15145509
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.08857385548 , 2804.2520032
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.61746138453 , 2117.82647276
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.99339309721 , 3772.01111
229 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.06746572113 , 3161.54155
945 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 6.8101374698 , 3223.873258
54 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 10.9291199934 , 215.84351805
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.97364518472 , 670.45556462
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 11.4093551256 , 411.45989448
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.35773280302 , 1555.566490
25 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.39763433 , 1593.51003205
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.2909063891 , 1511.471438
61 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 10.3596518529 , 2364.03590388
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.46484247359 , 2874.95727498
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.27698747616 , 2289.37228055
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.7884639082 , 3149.58028
707 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.79733224029 , 3619.98382
816 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.8469726013 , 3760.50482
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 2.72309319377 , 1629.63341781 )}; 
\backslash
addplot [no marks] coordinates { ( 2.07246366282 , 746.014327679 ) ( 4.60340316546
 , 848.069201044 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 2.07246366282 , 746.01432767
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [no marks] coordinates { ( 1.93264031653 , 179.294057701 ) ( 4.60340316546
 , 848.069201044 ) }; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.93264031653 , 179.29405770
1 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.354616533601 , 356.0396263
84 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.15960458468 , 1381.492156
86 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.72309319377 , 1629.633417
81 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.71583919728 , 1427.860317
78 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.9205238997 , 2753.72729596
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.546995939476 , 2353.2251799
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.18253338838 , 2840.39369243
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.68377804401 , 3526.04444
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.87609035949 , 3486.34030
544 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.28755568283 , 3631.17508
084 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.37811652146 , 453.91934777
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.60340316546 , 848.06920104
4 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.66076427426 , 767.50608134
2 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.44439247352 , 1886.117144
75 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.35650455297 , 1300.195594
62 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.48669208201 , 1553.705384
67 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.52845468778 , 2714.15145509
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.08857385548 , 2804.2520032
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.61746138453 , 2117.82647276
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.99339309721 , 3772.01111
229 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.06746572113 , 3161.54155
945 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 6.8101374698 , 3223.873258
54 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 10.9291199934 , 215.84351805
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.97364518472 , 670.45556462
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 11.4093551256 , 411.45989448
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.35773280302 , 1555.566490
25 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.39763433 , 1593.51003205
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.2909063891 , 1511.471438
61 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 10.3596518529 , 2364.03590388
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.46484247359 , 2874.95727498
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.27698747616 , 2289.37228055
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.7884639082 , 3149.58028
707 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.79733224029 , 3619.98382
816 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.8469726013 , 3760.50482
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4.60340316546 , 848.069201044 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 2.07246366282 , 746.01432767
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.93264031653 , 179.29405770
1 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.354616533601 , 356.0396263
84 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.15960458468 , 1381.492156
86 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.72309319377 , 1629.633417
81 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.71583919728 , 1427.860317
78 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.9205238997 , 2753.72729596
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.546995939476 , 2353.2251799
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.18253338838 , 2840.39369243
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.68377804401 , 3526.04444
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [no marks] coordinates { ( 2.87609035949 , 3486.34030544 ) ( 5.06746572113
 , 3161.54155945 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.87609035949 , 3486.34030
544 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [no marks] coordinates { ( 2.28755568283 , 3631.17508084 ) ( 5.06746572113
 , 3161.54155945 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.28755568283 , 3631.17508
084 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.37811652146 , 453.91934777
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.60340316546 , 848.06920104
4 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.66076427426 , 767.50608134
2 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.44439247352 , 1886.117144
75 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.35650455297 , 1300.195594
62 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.48669208201 , 1553.705384
67 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.52845468778 , 2714.15145509
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.08857385548 , 2804.2520032
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.61746138453 , 2117.82647276
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.99339309721 , 3772.01111
229 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.06746572113 , 3161.54155
945 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [no marks] coordinates { ( 6.8101374698 , 3223.87325854 ) ( 5.06746572113
 , 3161.54155945 ) }; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 6.8101374698 , 3223.873258
54 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 10.9291199934 , 215.84351805
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.97364518472 , 670.45556462
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 11.4093551256 , 411.45989448
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.35773280302 , 1555.566490
25 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.39763433 , 1593.51003205
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.2909063891 , 1511.471438
61 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 10.3596518529 , 2364.03590388
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.46484247359 , 2874.95727498
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.27698747616 , 2289.37228055
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.7884639082 , 3149.58028
707 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.79733224029 , 3619.98382
816 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.8469726013 , 3760.50482
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 5.06746572113 , 3161.54155945 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 2.07246366282 , 746.01432767
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 1.93264031653 , 179.29405770
1 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 0.354616533601 , 356.0396263
84 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.15960458468 , 1381.492156
86 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 2.72309319377 , 1629.633417
81 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 3.71583919728 , 1427.860317
78 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.9205238997 , 2753.72729596
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 0.546995939476 , 2353.2251799
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 2.18253338838 , 2840.39369243
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 1.68377804401 , 3526.04444
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.87609035949 , 3486.34030
544 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 2.28755568283 , 3631.17508
084 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 5.37811652146 , 453.91934777
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.60340316546 , 848.06920104
4 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 4.66076427426 , 767.50608134
2 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 5.44439247352 , 1886.117144
75 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.35650455297 , 1300.195594
62 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 6.48669208201 , 1553.705384
67 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [no marks] coordinates { ( 6.52845468778 , 2714.15145509 ) ( 8.46484247359
 , 2874.95727498 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.52845468778 , 2714.15145509
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [no marks] coordinates { ( 6.08857385548 , 2804.2520032 ) ( 8.46484247359
 , 2874.95727498 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 6.08857385548 , 2804.2520032
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 7.61746138453 , 2117.82647276
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.99339309721 , 3772.01111
229 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 5.06746572113 , 3161.54155
945 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 6.8101374698 , 3223.873258
54 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 10.9291199934 , 215.84351805
9 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 8.97364518472 , 670.45556462
6 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ blue ,only marks,mark=star] coordinates { ( 11.4093551256 , 411.45989448
8 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 9.35773280302 , 1555.566490
25 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.39763433 , 1593.51003205
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ green ,only marks,mark=star] coordinates { ( 11.2909063891 , 1511.471438
61 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [no marks] coordinates { ( 10.3596518529 , 2364.03590388 ) ( 8.46484247359
 , 2874.95727498 ) }; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 10.3596518529 , 2364.03590388
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.46484247359 , 2874.95727498
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ red ,only marks,mark=star] coordinates { ( 8.27698747616 , 2289.37228055
 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.7884639082 , 3149.58028
707 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 9.79733224029 , 3619.98382
816 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )}; 
\backslash
addplot [ orange ,only marks,mark=star] coordinates { ( 10.8469726013 , 3760.50482
057 ) }; 
\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 8.46484247359 , 2874.95727498 )};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Links-creation"

\end_inset

Links creation
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}[
\end_layout

\begin_layout Plain Layout

		grid=major,
\end_layout

\begin_layout Plain Layout

		width=
\backslash
textwidth,
\end_layout

\begin_layout Plain Layout

		height=
\backslash
axisdefaultheight,
\end_layout

\begin_layout Plain Layout

		xlabel = Time $(s)$,
\end_layout

\begin_layout Plain Layout

		ylabel = Frequency $(Hz)$,
\end_layout

\begin_layout Plain Layout

		xmin = 0, xmax = 13,
\end_layout

\begin_layout Plain Layout

		ymin = 0, ymax = 4000,
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout


\backslash
addplot [ only marks,mark=star,nodes near coords={(t1,f1)}] coordinates
 { ( 4 , 2000 ) };
\end_layout

\begin_layout Plain Layout


\backslash
addplot [ only marks,mark=star,nodes near coords={(t2,f2)}] coordinates
 { ( 7 , 2500 ) };
\end_layout

\begin_layout Plain Layout


\backslash
addplot[only marks,mark=o,mark options={solid,scale=2, black},text mark
 as node=true] coordinates {( 4, 2000 )};
\end_layout

\begin_layout Plain Layout


\backslash
addplot [no marks] coordinates { (4,2000) (7,2500) };
\end_layout

\begin_layout Plain Layout


\backslash
node[above,align=left] at (axis cs:8,1500) {hash$=t_2-t_1:f_2-f_1:f_1$
\backslash

\backslash
time=$t_1$};
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Link-structure"

\end_inset

Link structure
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Scoring"

\end_inset

Scoring
\end_layout

\begin_layout Standard
It is assumed that the full song links are in the database.
 Now a client after recording a small piece of song, computes on its own
 the links of the recording and send them to the server.
 The server has to:
\end_layout

\begin_layout Itemize
Put the recording links in a temporary in-memory table
\end_layout

\begin_layout Itemize
Relate the full songs links table with the recording table it they share
 the same hash
\end_layout

\begin_layout Itemize
Count the tuples grouped by the time difference between the recording links
 and the full song links
\begin_inset Foot
status open

\begin_layout Plain Layout
Links of the same song share the same time difference
\end_layout

\end_inset

 and the song id
\end_layout

\begin_layout Itemize
Descending sort the tuples according to the count field
\end_layout

\begin_layout Itemize
The top most tuple obtained contains the id of the most likely matching
\end_layout

\begin_layout Chapter
Java implementation
\end_layout

\begin_layout Standard
In the next sections the Java implementation of the algorithm will be discussed.
 The database schema is represented in the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Database-conceptual-design"

\end_inset

; the classes diagram can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Class-diagram"

\end_inset

.
\begin_inset VSpace vfill
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[auto,node distance=1.5cm]
\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node1) {
\backslash
textbf{musicinfo}}
\end_layout

\begin_layout Plain Layout

		[grow=up,sibling distance=2cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {path}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {title}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{id}}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[relationship] (rel1) [right = of node1] {
\backslash
textit{refers to}};
\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node2) [right = of rel1] {
\backslash
textbf{hashtable}}
\end_layout

\begin_layout Plain Layout

		[grow=down,sibling distance=2cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{id}}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] (bot) {hash}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {time}};
\end_layout

\begin_layout Plain Layout

	
\backslash
path (rel1) edge node {1,
\backslash
(n
\backslash
)} (node1)
\end_layout

\begin_layout Plain Layout

	edge node {1,1} (node2);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
node[entity] (node3) [below = of rel1] {
\backslash
textbf{
\backslash
textunderscore record}}
\end_layout

\begin_layout Plain Layout

		[grow=down,sibling distance=3cm]
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{hash
\backslash
textunderscore r}}}
\end_layout

\begin_layout Plain Layout

		child {node[attribute] {
\backslash
underline{start}}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Database-conceptual-design"

\end_inset

Database conceptual design
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{landscape}
\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
moveright  2in  
\backslash
hbox{
\end_layout

\begin_layout Plain Layout


\backslash
scalebox{.75}{
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{package}{io}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{interface}[text width=3.5 cm]{AbstractReader}{-4,-3}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~getData () : float[]}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{interface}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=4.5 cm]{MicReader}{-4,-0.5}
\end_layout

\begin_layout Plain Layout

			
\backslash
implement{AbstractReader}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-seconds : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+MicReader (seconds: int)}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=5.5 cm]{WavReader}{2,-0.5}
\end_layout

\begin_layout Plain Layout

			
\backslash
implement{AbstractReader}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-title : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-fileName : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-data : float[]}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+WavReader (fileName : String)}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getData () : float[]}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getTitle () : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getFileName () : String}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{package}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{package}{database}	
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=5.5 cm]{DB}{9,-1.5}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+DB ()}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+insert (file : WavReader) : void}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+searchId (list : List<Link>) : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getSongById (id : int) : Song}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{package}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{package}{model}	
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=4.5 cm]{Song}{15.5,-2}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-id : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-title : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+DB (id : int, title: String)}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{package}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{package}{spectrogram}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=6 cm]{Spectrogram}{-3,-9}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-winFFT : List<Complex[]>}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+Spectrogram (data : float[])}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getWinFFT () : List<Complex[]>}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=8 cm]{Window}{-3,-12}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-window : float[]}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~Window ()}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~extractWindow (data : float[], pos : int) : float[]}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{package}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
begin{package}{fingerprint}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=6.5 cm]{Fingerprint}{6,-7}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-peakList : List<Peak>}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+Fingerprint (reader : AbstractReader)}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getPeakList() : List<Peak>}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=7 cm]{Peak}{6,-11}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-freq : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-power : float}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-time : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~Peak (freq : int, power : float, time : int)}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~getFreq() : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~getTime() : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{-getBand() : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+compareBand(p : Peak) : boolean}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=5.5 cm]{Links}{13,-7}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-peakList : List<Peak>}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+Links (peakList : List<Peak>)}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=6 cm]{Link}{16,-9.5}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-hash : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-time : int}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~Link (address : Peak, peak : Peak)}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getHash() : String}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{+getTime() : int}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{class}[text width=9 cm]{PeaksFinder}{15,-13}
\end_layout

\begin_layout Plain Layout

			
\backslash
attribute{-peaks : Set<Peak>}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~PeaksFinder (data : Complex[], band : int, time : int)}
\end_layout

\begin_layout Plain Layout

			
\backslash
operation{~getPeaks() : Set<Peak>}
\end_layout

\begin_layout Plain Layout

		
\backslash
end{class}
\end_layout

\begin_layout Plain Layout

	
\backslash
end{package}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{DB}{}{}{WavReader}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{DB}{}{}{Song}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Spectrogram}{}{}{Window}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Fingerprint}{}{}{AbstractReader}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Fingerprint}{}{}{Spectrogram}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Fingerprint}{}{}{Peak}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{DB}{}{}{Links}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{DB}{}{}{Fingerprint}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Links}{}{}{Link}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{Fingerprint}{}{}{PeaksFinder}
\end_layout

\begin_layout Plain Layout

	
\backslash
unidirectionalAssociation{PeaksFinder}{}{}{Peak}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

}}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Class-diagram"

\end_inset

Classes diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{landscape}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Java classes
\end_layout

\begin_layout Subsection
io package
\end_layout

\begin_layout Subsubsection
AbstractReader interface
\end_layout

\begin_layout Standard
The 
\series bold
AbstractReader
\series default
 interface defines the method signature 
\family typewriter
getData()
\family default
 which will be used to get time domain data of a generic audio signal.
 All the classes which deal with the reading of audio signals has to implement
 this interface.
\end_layout

\begin_layout Subsubsection
MicReader class
\end_layout

\begin_layout Standard
The 
\series bold
MicReader
\series default
 class is responsible for recording an audio signal from the microphone.
 It implements the interface 
\shape italic
AbstractReader
\shape default
 so that the method 
\family typewriter
getData()
\family default
 is defined.
 The constructor takes an integer parameter which specify how many second
 the recording will last.
\end_layout

\begin_layout Subsubsection
WavReader class
\end_layout

\begin_layout Standard
The 
\series bold
WavReader
\series default
 class can read a Wave file.
 It implements the 
\shape italic
AbstractReader
\shape default
 interface and exposes the 
\family typewriter
getData()
\family default
 method.
 The constructor takes a string parameter as the path of the wav file.
 Two more methods are defined:
\end_layout

\begin_layout Itemize

\family typewriter
getTitle()
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the title of the wav song
\end_layout

\begin_layout Itemize

\family typewriter
getFileName()
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the path of the wav file
\end_layout

\begin_layout Subsection
spectrogram package
\end_layout

\begin_layout Subsubsection
Window class
\end_layout

\begin_layout Standard
The 
\series bold
Window
\series default
 class computes an Hann window of a given size and applies it to some data.
 The class exposes two methods:
\end_layout

\begin_layout Itemize

\family typewriter
Window()
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, which computes the Hann window
\end_layout

\begin_layout Itemize

\family typewriter
extractWindow(data : float[], pos : int)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 given a time domain signal stored in the 
\family typewriter
data
\family default
 array, this method extracts a subarray of 
\family typewriter
data
\family default
 starting from 
\family typewriter
pos
\family default
 whose length is equal to the window size, then, after applying the window
 function, the subarray is returned
\end_layout

\begin_layout Subsubsection
Spectrogram class
\end_layout

\begin_layout Standard
The 
\series bold
Spectrogram 
\series default
class is responsible for taking the audio signal in the time domain and
 compute the DFT.
 The following methods are defined:
\end_layout

\begin_layout Itemize

\family typewriter
Spectrogram(data : float[])
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, which takes as a parameter an audio signal in the time
 domain then breaks it down into windows with an overlap of 50% and computes
 for each window the DFT, stores the result in a list.
\end_layout

\begin_layout Itemize

\family typewriter
getWinFFT() : List<Complex[]>
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the spectrogram as a list of 
\family typewriter
Complex
\family default
 arrays.
 Each array is a frequency-domain window.
\end_layout

\begin_layout Subsection
model package
\end_layout

\begin_layout Subsubsection
Song class
\end_layout

\begin_layout Standard

\series bold
Song
\series default
 is a simple model class, which stores basic information about a song.
 The constructor takes as parameters the 
\shape italic
song id
\shape default
 and the 
\shape italic
song title
\shape default
.
\end_layout

\begin_layout Subsection
fingerprint package
\end_layout

\begin_layout Subsubsection
Peak class
\end_layout

\begin_layout Standard
The 
\series bold
Peak
\series default
 class represents a peak of the spectrogram, it implements the 
\family typewriter
Comparable
\family default
 Java interface.
 It has the following attributes:
\end_layout

\begin_layout Itemize

\family typewriter
freq : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 an index pointing to an element of the frequency array
\begin_inset Foot
status open

\begin_layout Plain Layout
Just a convenient way to store frequencies as integer numbers; the frequency
 array is defined in the 
\series bold
Consts
\series default
 class
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
power : float
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the power of the peak, given by the modulus of the corresponding complex
 number in the spectrogram
\end_layout

\begin_layout Itemize

\family typewriter
time : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the window in which the peak is
\end_layout

\begin_layout Standard
The following methods are defined:
\end_layout

\begin_layout Itemize

\family typewriter
Peak(freq : int, power : float, time : int)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, creates the Peak object given the three parameters
\end_layout

\begin_layout Itemize

\family typewriter
getFreq() : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the value of the attribute 
\family typewriter
freq
\end_layout

\begin_layout Itemize

\family typewriter
getTime() : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the value of the attribute 
\family typewriter
time
\end_layout

\begin_layout Itemize

\family typewriter
getBand() : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the band the peak is in
\end_layout

\begin_layout Itemize

\family typewriter
compareBand(p : Peak) : boolean
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 checks if the Peak 
\family typewriter
p
\family default
 and the current Peak are in the same band
\end_layout

\begin_layout Itemize

\family typewriter
compareTo(o : Peak) : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 implementation of the method of the Comparable interface, sorts the Peaks
 in ascending order by their frequencies
\end_layout

\begin_layout Subsubsection
Fingerprint
\end_layout

\begin_layout Standard
The 
\series bold
Fingerprint
\series default
 class is used to find the most important information in the spectrogram,
 which will be used to generate the 
\series bold
Links
\series default
.
 It is made up of two methods:
\end_layout

\begin_layout Itemize

\family typewriter
Fingerprint (reader : AbstractReader)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, uses the 
\family typewriter
Spectrogram
\family default
 class to compute the spectrogram, divides the spectrogram in cells (see
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Spectrum-division"

\end_inset

), uses the class 
\family typewriter
PeaksFinder
\family default
 to find the three most powerful frequencies in each cell (temporary saved
 in a 
\family typewriter
FixedSizeTreeSet
\family default
), add them in a 
\family typewriter
List<Peak>
\end_layout

\begin_layout Itemize

\family typewriter
getPeakList() : List<Peak> 
\family default

\begin_inset Formula $\Rightarrow$
\end_inset

 returns a list of the most powerful peaks
\end_layout

\begin_layout Subsubsection
PeaksFinder
\end_layout

\begin_layout Standard
The class 
\series bold
PeaksFinder
\series default
 is used to find the three most powerful points in a frequency-domain window.
 It has two methods:
\end_layout

\begin_layout Itemize

\family typewriter
PeaksFinder (data : Complex[], band : int, time : int)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, takes the complex data to analyze, the band and the window
 they belong to.
 A 3-element 
\family typewriter
FixedSizeTreeSet
\family default
 is initialized, which will hold the three most powerful peaks.
 The algorithm loop through the 
\family typewriter
data
\family default
 array, for each element of the array it checks if the previous 5 elements
 and the 5 following elements are less powerful than the current, if so
 the current element is added as a 
\family typewriter
Peak
\family default
 to the 
\family typewriter
FixedSizeTreeSet
\family default
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Peaks-finding"

\end_inset

).
\end_layout

\begin_layout Itemize

\family typewriter
getPeaks() : Set<Peaks>
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the 
\family typewriter
FixedSizeTreeSet
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{axis}
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot[thick, no marks, smooth] coordinates { (1,0) (1,3) };
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [red, thick, only marks,mark=star] coordinates { ( 1 , 1 ) };
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[<-] (axis cs:1.01,1) -- node[below right, align=left]{This is not
\backslash

\backslash
a Peak}(axis cs:1.1, 1);
\end_layout

\begin_layout Plain Layout

		
\backslash
addplot [red, thick, only marks,mark=star] coordinates { ( 1 , 3 ) };
\end_layout

\begin_layout Plain Layout

		
\backslash
draw[<-] (axis cs:1.01,3) -- node[below right, align=left]{This is
\backslash

\backslash
a Peak}(axis cs:1.1, 3);
\end_layout

\begin_layout Plain Layout

	
\backslash
end{axis}
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Peaks-finding"

\end_inset

Peaks finding
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Link
\end_layout

\begin_layout Standard

\series bold
Link
\series default
 is a nested class in the 
\series bold
Links 
\series default
class.
 It stores information about the a link and has the following methods:
\end_layout

\begin_layout Itemize

\family typewriter
Link(address : Peak, peak : Peak)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, which takes the address 
\family typewriter
Peak
\family default
 and the generic 
\family typewriter
Peak
\family default
.
 It computes the hash (as shown in the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Links-structure"

\end_inset

) end store the address 
\family typewriter
Peak
\family default
 time
\end_layout

\begin_layout Itemize

\family typewriter
getHash() : String
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the computed hash
\end_layout

\begin_layout Itemize

\family typewriter
getTime() : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 returns the address 
\family typewriter
Peak
\family default
 time
\end_layout

\begin_layout Subsubsection
Links
\end_layout

\begin_layout Standard
The 
\series bold
Links
\series default
 class extends an 
\family typewriter
ArrayList<Link>
\family default
 in order to define a specific constructor.
 All the methods are inherited from the extended class, the constructor
 is defined as follows:
\end_layout

\begin_layout Itemize

\family typewriter
Links(peakList : List<Peak>)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 It takes the most powerful peaks in input and geneate the 
\family typewriter
Link
\family default
s as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "Links generation"

\end_inset

.
\end_layout

\begin_layout Subsection
db package
\end_layout

\begin_layout Subsubsection
DB class
\end_layout

\begin_layout Standard
The 
\series bold
DB
\series default
 class defines all the useful methods to interact with the database:
\end_layout

\begin_layout Itemize

\family typewriter
DB()
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, initializes the communication with the database
\end_layout

\begin_layout Itemize

\family typewriter
insert(file : WavReader) : void
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 takes as a parameter the song file, then:
\end_layout

\begin_deeper
\begin_layout Itemize
Stores the song information (such as the 
\shape italic
title
\shape default
 and the 
\shape italic
path
\shape default
) in the 
\family typewriter
musicinfo
\family default
 table
\end_layout

\begin_layout Itemize
Finds the most powerful 
\family typewriter
Peak
\family default
s using the 
\family typewriter
Fingerprint
\family default
 class
\end_layout

\begin_layout Itemize
Computes the 
\family typewriter
Links
\end_layout

\begin_layout Itemize
Stores the 
\family typewriter
Links
\family default
 in the 
\family typewriter
hashtable
\family default
 table
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
searchId(list : List<Link>) : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 takes in input a Link list, then follows the step defined in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Scoring"

\end_inset


\end_layout

\begin_layout Itemize
getSondById(id : int) : Song 
\begin_inset Formula $\Rightarrow$
\end_inset

 takes as a parameter a song id, performs a query in the 
\family typewriter
musicinfo
\family default
 table then populates and returns a 
\family typewriter
Song
\family default
 object
\end_layout

\begin_layout Subsection
utils package
\end_layout

\begin_layout Standard
The class in the 
\family typewriter
utils
\family default
 package are not listed in the classes diagram since they are really language-sp
ecific or helper functions.
 However the 
\family typewriter
FixedSizeTreeSet
\family default
 will be described in the following paragraph.
\end_layout

\begin_layout Subsubsection
FixedSizeTreeSet
\end_layout

\begin_layout Standard
The class 
\series bold
FixedSizeTreeSet
\series default
 extends the generic 
\family typewriter
TreeSet
\family default
.
 It represents a sorted fixed-length set.
 It has two attributes:
\end_layout

\begin_layout Itemize

\family typewriter
ascSorted : boolean
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\family typewriter
true
\family default
 if the set is ascending sorted, 
\family typewriter
false
\family default
 if descending sorted
\end_layout

\begin_layout Itemize

\family typewriter
size : int
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the size of the set, the maximum amount of elements it can hold
\end_layout

\begin_layout Standard
And the following methods:
\end_layout

\begin_layout Itemize

\family typewriter
FixedSizeTreeSet(size : int, ascSorted : boolean)
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 the constructor, 
\family typewriter
size
\family default
 is the length of the 
\family typewriter
Set
\family default
, 
\family typewriter
ascSorted
\family default
 tells the class what to do when an exceeding element is being added: if
 it is 
\family typewriter
true
\family default
 the left most element is polled, else the right most element is polled
\end_layout

\begin_layout Itemize

\family typewriter
add(e : T) : boolean
\family default
 
\begin_inset Formula $\Rightarrow$
\end_inset

 overrides the superclass 
\family typewriter
add
\family default
 method, adds an element to the 
\family typewriter
Set
\family default
 and eventually removes the exceeding element
\end_layout

\begin_layout Standard
The idea of using the 
\series bold
PriorityQueue
\series default
 Java class has been dismissed since it is not a fized-length structure.
\end_layout

\begin_layout Section
Database queries
\end_layout

\begin_layout Standard
In the following section the most important queries will be analized.
\end_layout

\begin_layout Subsection
The _record table creation
\end_layout

\begin_layout Standard
The _record table is where the recording 
\family typewriter
Links
\family default
 are stored, it is created with the following lines:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=SQL,numberfirstline,firstnumber=1,numbers=left, stepnumber=1}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{lstlisting}[basicstyle=
\backslash
ttfamily]
\end_layout

\begin_layout Plain Layout

CREATE TEMPORARY TABLE musiclibrary._record (
\end_layout

\begin_layout Plain Layout

	hash_r VARCHAR(40) NOT NULL,
\end_layout

\begin_layout Plain Layout

	start INTEGER NOT NULL,
\end_layout

\begin_layout Plain Layout

	PRIMARY KEY (hash_r, start)
\end_layout

\begin_layout Plain Layout

) ENGINE=MEMORY;
\end_layout

\begin_layout Plain Layout

	
\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Create a temporary table, it will be dropped as soon as the session is closed
\end_layout

\begin_layout Enumerate

\family typewriter
hash_r
\family default
 is the hash of the 
\family typewriter
Link
\end_layout

\begin_layout Enumerate

\family typewriter
start
\family default
 is the window of the address 
\family typewriter
Peak
\end_layout

\begin_layout Enumerate
The primary key is composite, the two fields of the table are specified
\end_layout

\begin_layout Enumerate
Tell MariaDB to store the table in RAM
\begin_inset Foot
status open

\begin_layout Plain Layout
The queries will be a lot faster
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The scoring query
\end_layout

\begin_layout Standard
Considering the algorithm specifications given at 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Scoring"

\end_inset

 and analyze the following query:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=SQL,numberfirstline,firstnumber=1,numbers=left, stepnumber=1}
\end_layout

\begin_layout Plain Layout

	
\backslash
begin{lstlisting}[basicstyle=
\backslash
ttfamily]
\end_layout

\begin_layout Plain Layout

SELECT musiclibrary.hashtable.songId, COUNT(*) AS n
\end_layout

\begin_layout Plain Layout

	FROM musiclibrary.hashtable INNER JOIN musiclibrary._record
\end_layout

\begin_layout Plain Layout

	ON hashtable.hash=_record.hash_r
\end_layout

\begin_layout Plain Layout

	GROUP BY hashtable.time-_record.start, songId
\end_layout

\begin_layout Plain Layout

	ORDER BY n DESC
\end_layout

\begin_layout Plain Layout

	
\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Select the two needed fields: the song id and the corresponding count of
 the common links
\end_layout

\begin_layout Enumerate
Inner join between the 
\family typewriter
hashtable
\family default
 (with the links of the songs) and the temporary 
\family typewriter
_record
\family default
 table (with the recording links)
\end_layout

\begin_layout Enumerate
Condition to inner join: the two hashes has to be equal
\end_layout

\begin_layout Enumerate
Group in a single tuple the records which share the same time difference
 and the same song id
\end_layout

\begin_layout Enumerate
Descending sort the tuples, so that the most likely maching is the top most
 record
\end_layout

\begin_layout Section
Server-side
\end_layout

\begin_layout Standard
The server has to accomplish two jobs: insert the song links in the database
 and offer a service to be used by the client to find a song name.
\end_layout

\begin_layout Subsection
Insert class
\end_layout

\begin_layout Standard
The 
\series bold
Insert
\series default
 class takes in input a path where
\family typewriter
 .wav
\family default
 file are present.
 It lists all the available files, for each of them computes the 
\family typewriter
Links
\family default
 and store them in the database.
\end_layout

\begin_layout Subsection
Server class
\end_layout

\begin_layout Standard
The 
\series bold
Server
\series default
 class implements a REST service for the song scoring.
 
\shape italic
Tomcat Embed Core
\shape default
 library is used to provide an easy portable system, without using the stadard
 Tomcat infrastructure.
\end_layout

\begin_layout Standard
The Tomcat server is started at port 8080 and an 
\family typewriter
HttpServlet
\family default
 is mapped to the 
\family typewriter
/search
\family default
 URL.
 The servlet waits for a 
\shape italic
POST
\shape default
 request, where a 
\family typewriter
links
\family default
 parameter is sent (it contains a 
\shape italic
JSON
\shape default
-encoded 
\family typewriter
List<Link>
\family default
).
 The content of the 
\family typewriter
links
\family default
 parameter is converted into a Java 
\family typewriter
List<Link>
\family default
 using the 
\shape italic
Google GSON
\shape default
 library.
 The 
\family typewriter
List
\family default
 is then passed to the 
\family typewriter
DB
\family default
 class which performs the search, the response is returned as a 
\shape italic
JSON
\shape default
-encoded 
\family typewriter
Song
\family default
 object to the client.
\end_layout

\begin_layout Section
Client-side
\end_layout

\begin_layout Standard
On the client-side the software has to record a song for a couple of seconds,
 computes the 
\family typewriter
Links
\family default
, send them to the server and wait for a response.
\end_layout

\begin_layout Subsection
Client class
\end_layout

\begin_layout Standard
The 
\family typewriter
MicReader
\family default
 class is used to record a current playing song, then the 
\family typewriter
Links
\family default
 are computed.
 The 
\shape italic
OkHttp3
\shape default
 library is used to perform the request to the server.
 The 
\family typewriter
List<Link>
\family default
 is encoded as a 
\shape italic
JSON
\shape default
 object and sent to the URL where the Tomcat servlet is mapped to.
 The client waits for the response: it receives a 
\shape italic
JSON-
\shape default
encoded 
\family typewriter
Song
\family default
 object, which is converted to a normal Java 
\family typewriter
Song
\family default
 object using the 
\shape italic
Google GSON
\shape default
 library.
 All the needed information about the song can be found in the 
\family typewriter
Song
\family default
 object.
\end_layout

\begin_layout Chapter*
Webliography and bibliography
\end_layout

\begin_layout Itemize
Le serie di Fourier - Matematica.verde - Modulo Epsilon - Le serie, le serie
 di Fourier e la trasformata di Laplace
\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://helpx.adobe.com/audition/using/digitizing-audio.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://zone.ni.com/reference/en-XX/help/370524T-01/siggenhelp/fund_nyquist_and_sha
nnon_theorems/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://mathworld.wolfram.com/TaylorSeries.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://mathworld.wolfram.com/RectangleFunction.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Window_function
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tex.stackexchange.com/questions/127375/replicate-the-fourier-transform-tim
e-frequency-domains-correspondence-illustrati
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/7560860/are-tables-created-with-create-tempor
ary-table-in-memory-or-on-disk?utm_medium=organic&utm_source=google_rich_qa&utm_
campaign=google_rich_qa
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/8269916/what-is-sliding-window-algorithm-exam
ples
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://dsp.stackexchange.com/questions/19776/is-it-necessary-to-apply-some-window
-method-to-obtain-the-fft-java
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/6740545/understanding-fft-output
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.oracle.com/javase/tutorial/sound/capturing.html
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.tek-tips.com/viewthread.cfm?qid=1358705
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Open-source software
\end_layout

\begin_layout Standard
A list of the open-source software used in the making of the algorithm or
 helped the writing of this document.
\end_layout

\begin_layout Itemize
Debian
\end_layout

\begin_layout Itemize
LyX
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Tikz library
\end_layout

\begin_layout Itemize
Python
\end_layout

\begin_layout Itemize
Matplotlib
\end_layout

\begin_layout Itemize
IntelliJ Idea IDE
\end_layout

\begin_layout Itemize
Apache Commons libraries
\end_layout

\begin_layout Itemize
Google GSON library
\end_layout

\begin_layout Itemize
MariaDB Connector library
\end_layout

\begin_layout Itemize
OkHttp3 library
\end_layout

\begin_layout Itemize
Tomcat Embed Core library
\end_layout

\end_body
\end_document
